# Uses Crypt::Jwt Version 0.024
package JWT;

# Modules
use strict;
use CGI":standard";
use CGI::Carp qw(fatalsToBrowser);

# Dependencies
use Crypt::JWT ':all';

# Global Variables
my $ALG_HS256 = 'HS256';

# TODO: Develop
sub SetHeader {
    
    my $jwt                         = $_[0] || ();
    my $CGI                         = new CGI;

    # Func parameter handling
    if (defined $jwt) {
        print STDOUT "defined";
    }
    else {
        print STDOUT "not defined";
    }
    
} #


# Function:     Generates and encodes a JWT
# Parameter:    Payload in the format of a string/hash/arary(required), key as a string for signature(required), alg is the JWT algorithm type
# Return:       Returns a valid JWT, otherwise a error hash
sub SetToken {

    my $payload                     = $_[0] || ();  # Required
    my $key                         = $_[1] || ();  # Required
    my $alg                         = $_[2] || $ALG_HS256;  # Optional

    # Required input parameter error handling
    if (defined $payload && defined $key) {
        # Encode token
        my $jwt = encode_jwt( payload => $payload, key => $key, alg => $alg );

        # Error handling
        if (defined $jwt) {
            # Return success
            return {
                token => $jwt,
                message => "The JSON web token has been set.",
                status => "OK"
            };
        }
        else {
            # Return hash error
            return {
                # error => $jwt,
                message => "The JSON web token could not be set. The JWT could not be encoded.",
                status => "ERROR"
            }
        }
    }
    else {
        # Return hash error
        return {
            message => "The JSON web token could not be set. The input parameters payload and/or key are either null or empty.",
            status => "ERROR"
        }
    }
    
}#


# Function:     Validates and decodes a token into a readible format
# Parameters:   token is valid JWT(required), key is used to validate the token(required)
# Return:       Returns a valid decoded JWT, otherwise a error hash
sub ValidateToken {

    my $token                   = $_[0] || ();
    my $key                     = $_[1] || ();

    # Required input parameter error handling
    if (defined $token && defined $key) {
        # Decode token
        my $jwt = eval{ decode_jwt(token => $token, key => $key) };

        # Error handling
        if (defined $jwt) {
            # Return success
            return {
                token => $jwt,
                message => "The JSON web token is valid.",
                status => "OK"
            };
        }
        else {
            # Return hash error
            return {
                # error => $jwt,
                message => "The JSON web token could not be validated. The JWT could not be decoded.",
                status => "ERROR"
            }
        }
    }
    else {
        # Return hash error
        return {
            message => "The JSON web token could not be validated. The input parameters token and/or key are either null or empty.",
            status => "ERROR"
        }
    }

}#

1